# -*- after-save-hook: (org-babel-tangle); before-save-hook: (delete-trailing-whitespace)-*-
#+TITLE: Groovemacs Org Config File
#+AUTHOR: Hamza Shahid
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :exports code :results none :tangle init.el

* UI Tweaks
#+begin_src emacs-lisp
  (setq-default
   inhibit-startup-message t    ; Will not show up Emacs logo and splash on screen
   visible-bell t               ; Will flash the screen on error/invalid operation
   fill-column 100              ; toggle wrapping text at the 80th character
   tab-width 4                  ; Set width for tabs
   delete-by-moving-to-trash t  ; Delete files to trash
   backup-directory-alist '(("." . "~/.emacs.d/saves")) ;; Save tmp file saves to ~/.saves
   create-lockfiles t           ; They are good but mess up code files... and I'm a programmer
   history-length 1000
   initial-scratch-message ";;「グルーフマクス」へようこそ => Welcome to 'Groovemacs'\n\n")

  ;; Minimal UI
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-subword-mode 1) ; Iterate through CamelCase words
  (delete-selection-mode 1) ; Replace selected with paste/type&
  (setf frame-resize-pixelwise t) ;  Remove annoying border in StumpWM & KDE

  ;; Garbage-collect on focus-out, Emacs should feel snappier overall.
  ;; but messes with (use-package smooth-scrolling)
  (add-function :after after-focus-change-function
  				  (defun me/garbage-collect-maybe ()
  					(unless (frame-focus-state)
  					  (garbage-collect))))

  (add-to-list 'default-frame-alist '(font . "Iosevka Custom 12"))
  (add-to-list 'default-frame-alist '(alpha-background . 70))

  (savehist-mode t)

  ;; Don't ask for confirmation when opening this config file
  (add-to-list 'safe-local-variable-values '(before-save-hook . (delete-trailing-whitespace)))
  (add-to-list 'safe-local-variable-values '(after-save-hook . (org-babel-tangle)))

  ;; Auto zoom
  (defun auto-zoom-inc ()
    (when (not (active-minibuffer-window))
  	(text-scale-increase 1.5)))
  (defun auto-zoom-dec ()
    (when (not (active-minibuffer-window))
  	(text-scale-decrease 1.5)))
  (add-hook 'after-change-major-mode-hook 'auto-zoom-inc)
  (add-hook 'help-mode-hook 'auto-zoom-dec)

  (column-number-mode t) ; display character index at point
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  (dolist (mode '(org-mode-hook
  					term-mode-hook
  					shell-mode-hook
  					eshell-mode-hook
  					vterm-mode-hook
  					eat-mode))
  	(add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Package Init
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)

  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
  								:ref nil :depth 1
  								:files (:defaults "elpaca-test.el" (:exclude "extensions"))
  								:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
  		 (build (expand-file-name "elpaca/" elpaca-builds-directory))
  		 (order (cdr elpaca-order))
  		 (default-directory repo))
  	(add-to-list 'load-path (if (file-exists-p build) build repo))
  	(unless (file-exists-p repo)
  	  (make-directory repo t)
  	  (when (< emacs-major-version 28) (require 'subr-x))
  	  (condition-case-unless-debug err
  		  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
  				   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
  												   ,@(when-let ((depth (plist-get order :depth)))
  													   (list (format "--depth=%d" depth) "--no-single-branch"))
  												   ,(plist-get order :repo) ,repo))))
  				   ((zerop (call-process "git" nil buffer t "checkout"
  										 (or (plist-get order :ref) "--"))))
  				   (emacs (concat invocation-directory invocation-name))
  				   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
  										 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
  				   ((require 'elpaca))
  				   ((elpaca-generate-autoloads "elpaca" repo)))
  			  (progn (message "%s" (buffer-string)) (kill-buffer buffer))
  			(error "%s" (with-current-buffer buffer (buffer-string))))
  		((error) (warn "%s" err) (delete-directory repo 'recursive))))
  	(unless (require 'elpaca-autoloads nil t)
  	  (require 'elpaca)
  	  (elpaca-generate-autoloads "elpaca" repo)
  	  (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))
#+end_src

* Basic Packages
#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)

  (use-package doom-themes
    :ensure (:package "doom-themes"
  		   :fetcher github
  		   :repo "doomemacs/themes"
  		   :files (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el"))
    :config
    (load-theme 'doom-gruvbox t))

  (use-package org
    :ensure (:package "org"
  		   :local-repo "org"
  		   :repo "https://git.savannah.gnu.org/git/emacs/org-mode.git"
  		   :pre-build (progn (require 'elpaca-menu-org) (elpaca-menu-org--build))
  		   :autoloads "org-loaddefs.el"
  		   :build (:not elpaca--generate-autoloads-async)
  		   :files (:defaults ("etc/styles/" "etc/styles/*" "doc/*.texi")))
    :config
    (setq org-ellipsis "…"
  		org-src-window-setup 'current-window
  		org-startup-with-inline-images t
  		org-startup-with-latex-preview t
  	    org-image-actual-width nil)
    (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)
    ;; Open links in org with C-c C-o
    (with-eval-after-load 'org-ctags (setq org-open-link-functions nil))
    (org-babel-do-load-languages
     'org-babel-load-languages '((C . t)
  							   (latex . t))))

  (use-package org-download
    :ensure (:package "org-download"
  					:source nil
  					:protocol https
  					:inherit t
  					:depth 1
  					:repo "abo-abo/org-download"
  					:fetcher github
  					:files ("*.el" "*.el.in" "dir" "*.info" "*.texi" "*.texinfo"
  							"doc/dir" "doc/*.info" "doc/*.texi" "doc/*.texinfo" "lisp/*.el"
  							(:exclude ".dir-locals.el" "test.el" "tests.el" "*-test.el" "*-tests.el"
  									  "LICENSE" "README*" "*-pkg.el")))
    :custom
    (org-download-heading-lvl nil)
    (org-download-edit-cmd "krita %s"))

  (use-package org-modern
    :ensure (:package "org-modern"
  		   :repo "https://github.com/minad/org-modern"
  		   :local-repo "org-modern"
  		   :files ("*" (:exclude ".git" "LICENSE")))
    :config
    (setq org-auto-align-tags nil
  		org-tags-column 0
  		org-catch-invisible-edits 'show-and-error
  		org-special-ctrl-a/e t
  		org-insert-heading-respect-content t
  		org-hide-emphasis-markers t
  		org-pretty-entities t
  		org-modern-star 'replace
  		org-agenda-tags-column 0
  		org-agenda-block-separator ?─
  		org-agenda-time-grid
  		'((daily today require-timed)
  		  (800 1000 1200 1400 1600 1800 2000)
  		  " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
  		org-agenda-current-time-string
  		"◀── now ─────────────────────────────────────────────────")
  	(global-org-modern-mode))

  (use-package lambda-line
    :ensure (:type git :host github :repo "lambda-emacs/lambda-line")
    :custom
    ;; (Lambda-line-icon-time t) ; requires ClockFace font (see below)
    ;; (lambda-line-clockface-update-fontset "ClockFaceRectSolid") ; set clock icon
    (lambda-line-abbrev t) ; abbreviate major modes
    (lambda-line-hspace "  ")  ; add some cushion
    (lambda-line-prefix t) ; use a prefix symbol
    (lambda-line-prefix-padding nil) ; no extra space for prefix
    (lambda-line-status-invert nil)  ; no invert colors
    (lambda-line-gui-ro-symbol  " ⨂") ; symbols
    (lambda-line-gui-mod-symbol " ⬤")
    (lambda-line-gui-rw-symbol  " ◯")
    (lambda-line-vc-symbol "  ")
    (lambda-line-space-top +.25)  ; padding on top and bottom of line
    (lambda-line-space-bottom -.25)
    (lambda-line-symbol-position 0.05) ; adjust the vertical placement of symbol
    :config
    (set-face-attribute 'lambda-line-active-status-MD nil :foreground (doom-color 'red))
    (set-face-attribute 'lambda-line-active-status-RO nil :foreground (doom-color 'yellow))
    (set-face-attribute 'lambda-line-active-status-RW nil :foreground (doom-color 'green))
    (set-face-attribute 'lambda-line-visual-bell nil :background (doom-color 'grey))
    (setq lambda-line-position 'bottom) ; Set position of status-line
    ;; set divider line in footer
    (when (eq lambda-line-position 'top)
  	(setq-default mode-line-format (list "%_"))
  	(setq mode-line-format (list "%_")))
    (lambda-line-mode)) ; activate lambda-line

  (use-package vertico
    :defer t
    :ensure (:protocol https
  		   :inherit t
  		   :depth 1
  		   :repo "https://github.com/minad/vertico"
  		   :local-repo "vertico"
  		   :files ("*" (:exclude ".git" "LICENSE")))
    :init
    (vertico-mode))

  (use-package orderless
    :ensure (:package "orderless"
  		   :source nil
  		   :protocol https
  		   :inherit t
  		   :depth 1
  		   :repo "https://github.com/oantolin/orderless"
  		   :local-repo "orderless"
  		   :files ("*" (:exclude ".git")))
    :custom
    (completion-styles '(orderless basic)))

  (use-package which-key
    :defer t
    :ensure (:package "which-key"
  					:source nil
  					:protocol https
  					:inherit t
  					:depth 1
  					:repo "https://github.com/emacs-mirror/emacs"
  					:local-repo "which-key"
  					:branch "master"
  					:files ("lisp/which-key.el" (:exclude ".git")))
    :config
    (setq which-key-idle-delay 0.3)
    (which-key-mode))

  (use-package corfu
    :defer t
    :ensure (:package "corfu"
  					:source nil
  					:protocol https
  					:inherit t
  					:depth 1
  					:repo "https://github.com/minad/corfu"
  					:local-repo "corfu"
  					:files ("*" (:exclude ".git" "LICENSE")))
    ;; Optional customizations
    :custom
    (corfu-cycle t)                 ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                  ;; Enable auto completion
    ;; (corfu-commit-predicate t)      ;; Do not commit selected candidates on next input
    (corfu-quit-at-boundary t)      ;; Automatically quit at word boundary
    ;; (corfu-quit-no-match t)         ;; Automatically quit if there is no match
    (corfu-echo-documentation 0)    ;; if NIL, do not show documentation in the echo area
    (corfu-auto-prefix 3)           ;; Run Corfu after 'arg' characters are entered
    (corfu-auto-delay 0)            ;; No delay before trying to auto-complete
    ;; (lsp-completion-provider :none) ;; Use corfu instead for lsp completions
    (tab-always-indent 'complete)   ;; Enable indentation+completion using the TAB
    :config
    (global-corfu-mode t))

  (use-package marginalia
    :ensure (:package "marginalia"
  					:source nil
  					:protocol https
  					:inherit t
  					:depth 1
  					:repo "https://github.com/minad/marginalia"
  					:local-repo "marginalia"
  					:files ("*" (:exclude ".git" "LICENSE")))
    :config
    (marginalia-mode))

  (use-package multiple-cursors
    :ensure (:package "multiple-cursors"
  					:source nil
  					:protocol https
  					:inherit t
  					:depth 1
  					:fetcher github
  					:repo "magnars/multiple-cursors.el"
  					:files ("*.el" "*.el.in" "dir" "*.info" "*.texi" "*.texinfo" "doc/dir"
  							"doc/*.info" "doc/*.texi" "doc/*.texinfo" "lisp/*.el"
  							(:exclude ".dir-locals.el" "test.el" "tests.el" "*-test.el"
  									  "*-tests.el" "LICENSE" "README*" "*-pkg.el")))
    :config
    (global-set-key (kbd "C-c C-<return>") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))

  (use-package undo-tree
    :ensure (:package "undo-tree"
  					:source "GNU-devel ELPA"
  					:protocol https
  					:inherit t
  					:depth 1
  					:repo "https://gitlab.com/tsc25/undo-tree"
  					:local-repo "undo-tree"
  					:files ("*" (:exclude ".git")))
    :custom
    (undo-tree-auto-save-history t)
    (undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    :config
    (global-undo-tree-mode))

  (use-package ligature
    :ensure (:package "ligature"
  					:source nil
  					:protocol https
  					:inherit t
  					:depth 1
  					:fetcher github
  					:repo "mickeynp/ligature.el"
  					:files ("*.el" "*.el.in" "dir" "*.info" "*.texi" "*.texinfo"
  							"doc/dir" "doc/*.info" "doc/*.texi" "doc/*.texinfo" "lisp/*.el"
  							(:exclude ".dir-locals.el" "test.el" "tests.el" "*-test.el"
  									  "*-tests.el" "LICENSE" "README*" "*-pkg.el")))
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("-<<" "-<" "-<-" "<--" "<---" "<<-" "<-" "->" "->>" "-->" "--->" "->-" ">-" ">>-"
  									   "=<<" "=<" "=<=" "<==" "<===" "<<=" "<=" "=>" "=>>" "==>" "===>" "=>=" ">=" ">>="
  									   "<->" "<-->" "<--->" "<---->" "<=>" "<==>" "<===>" "<====>" "::" ":::" "__"
  									   "<~~" "</" "</>" "/>" "~~>" "==" "!=" "/=" "~=" "<>" "===" "!==" "!===" "=/=" "=!="
  									   "<:" ":=" "*=" "*+" "<*" "<*>" "*>" "<|" "<|>" "|>" "<." "<.>" ".>" "+*" "=*" "=:" ":>"
  									   "(*" "*)" "/*" "*/" "[|" "|]" "{|" "|}" "++" "+++" "\\/" "/\\" "|-" "-|" "<!--" "<!---"))
    ;; Enables ligature checks globally in all buffers.  You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode))

  (use-package all-the-icons
    :if (display-graphic-p)
    :ensure (:package "all-the-icons"
  					:source "MELPA"
  					:protocol https
  					:inherit t
  					:depth 1
  					:repo "domtronn/all-the-icons.el"
  					:fetcher github
  					:files (:defaults "data")))

  (use-package kind-icon
    :ensure (:package "kind-icon"
  					:source nil
  					:protocol https
  					:inherit t
  					:depth 1
  					:repo "https://github.com/jdtsmith/kind-icon"
  					:local-repo "kind-icon"
  					:files ("*" (:exclude ".git")))
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  (use-package all-the-icons-dired
    :ensure (:package "all-the-icons-dired"
  					:source nil
  					:protocol https
  					:inherit t
  					:depth 1
  					:repo "wyuenho/all-the-icons-dired"
  					:fetcher github
  					:files ("*.el" "*.el.in" "dir" "*.info" "*.texi" "*.texinfo"
  							"doc/dir" "doc/*.info" "doc/*.texi" "doc/*.texinfo" "lisp/*.el"
  							(:exclude ".dir-locals.el" "test.el" "tests.el" "*-test.el" "*-tests.el"
  									  "LICENSE" "README*" "*-pkg.el")))
    :config
    (add-hook 'dired-mode-hook #'all-the-icons-dired-mode))

  (elpaca-process-queues)

  (use-package yasnippet
    :ensure (:package "yasnippet"
  					:source nil
  					:protocol https
  					:inherit t
  					:depth 1
  					:repo "joaotavora/yasnippet"
  					:fetcher github
  					:files ("yasnippet.el" "snippets")))

  (use-package yasnippet-snippets
    :ensure (:package "yasnippet-snippets"
  					:source nil
  					:protocol https
  					:inherit t
  					:depth 1
  					:repo "AndreaCrotti/yasnippet-snippets"
  					:fetcher github
  					:files ("*.el" "snippets" ".nosearch"))
    :config
    (setq yas-snippet-dirs
  		`("/home/hamza/.emacs.d/snippets" ;; Personal Snippets
  		  ,yasnippet-snippets-dir))
    (yas-global-mode 1))

  (use-package magit
    :ensure (:package "magit"
  					:source nil
  					:protocol https
  					:inherit t
  					:depth 1
  					:fetcher github
  					:repo "magit/magit"
  					:files ("lisp/magit*.el" "lisp/git-rebase.el" "docs/magit.texi" "docs/AUTHORS.md" "LICENSE"
  							"Documentation/magit.texi" "Documentation/AUTHORS.md"
  							(:exclude "lisp/magit-libgit.el" "lisp/magit-libgit-pkg.el"
  									  "lisp/magit-section.el" "lisp/magit-section-pkg.el"))))
#+end_src

* Programming
#+begin_src emacs-lisp
  (use-package typescript-mode
    :defer t
    :ensure (:package "typescript-mode"
                      :source "MELPA"
                      :protocol https
                      :inherit t
                      :depth 1
                      :fetcher github
                      :repo "emacs-typescript/typescript.el"
                      :files ("*.el" "*.el.in" "dir" "*.info" "*.texi" "*.texinfo"
                              "doc/dir" "doc/*.info" "doc/*.texi" "doc/*.texinfo"
                              "lisp/*.el" (:exclude ".dir-locals.el"
                                                    "test.el" "tests.el" "*-test.el" "*-tests.el"
                                                    "LICENSE" "README*" "*-pkg.el"))))
#+end_src

* Custom
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq c-set-style "k&r")
  (setq c-basic-offset 4)

  ;;; ONLY M-SPC keybindings are here...
  (setq cycle-spacing-actions '(delete-all-space restore))
  (global-set-key (kbd "M-<return>") #'cycle-spacing)
  (global-unset-key (kbd "M-SPC"))
  (global-set-key (kbd "M-SPC f c e") (lambda () (interactive) (find-file "~/.emacs.d/init.org")))
  (global-set-key (kbd "M-SPC f c h") (lambda () (interactive) (find-file "~/.config/hypr/hyprland.conf")))
  (global-set-key (kbd "M-SPC M-e") (lambda () (interactive) (find-file "~/.emacs.d/init.org")))
  (which-key-add-key-based-replacements
    "M-SPC M-e" "Emacs Config"
    "M-SPC f" "Files"
    "M-SPC f c" "Configs"
    "M-SPC f c e" "Emacs Config"
    "M-SPC f c h" "Hyprland Config")

  ;; ;; Org mode
  ;; (define-skeleton hamza/src-block
  ;;   "Insert src block in org mode"
  ;;   "Language: "
  ;;   "#+begin_src " str
  ;;   > _
  ;;   "\n#+end_src")

  ;; ;; C/C++
  ;; (define-skeleton hamza/skel-c-main
  ;;   "Insert a typical main function."
  ;;   nil
  ;;   "int main(int argc, char** argv) {\n"
  ;;   > _
  ;;   "\n}"
  ;;   )

  ;; (define-skeleton hamza/skel-c-comment
  ;;   "Insert comment."
  ;;   nil
  ;;   "/* "
  ;;   > _
  ;;   " */"
  ;;   )

  ;; (define-skeleton hamza/skel-c-printf
  ;;   "Insert the common printf statement at point."
  ;;   nil
  ;;   > "printf(\""
  ;;   _
  ;;   "\");"
  ;;   )

  ;; (define-skeleton hamza/skel-c-printf-flush
  ;;   "Insert the common printf statement followed by an fflush at point."
  ;;   nil
  ;;   > "printf(\""
  ;;   _
  ;;   "\");fflush(stdout);"
  ;;   )

  ;; (define-skeleton hamza/skel-c-printf-newline
  ;;   "Insert a printf statement with newline"
  ;;   nil
  ;;   "printf(\"\\n\");"
  ;; )

  ;; (define-skeleton hamza/skel-c-loop-for
  ;;   "Insert a for-loop with an int counter variable."
  ;;   "Counter variable(int): "
  ;;   >"for(" str "=0;" str "<" _ ";" str "++) {" \n
  ;;   \n
  ;;   > "}" \n
  ;;   )

  ;; (define-skeleton hamza/skel-c-loop-while
  ;;   "Insert a while-loop template."
  ;;   > "while(" _ ") {"\n
  ;;   \n
  ;;   >"}" \n
  ;;   )

  ;; (define-skeleton hamza/skel-c-fflush
  ;;   "Insert a fflush of stdout."
  ;;   nil
  ;;   > "fflush(stdout);"
  ;;   )

  ;; (define-skeleton hamza/skel-c-fprintf
  ;;   "Insert a fprintf statement at point asking for the stream."
  ;;   "STREAM: "
  ;;   > "fprintf(" str ",\""
  ;;   _
  ;;   "\\n\");"
  ;;   )

  ;; (define-skeleton hamza/skel-c-include
  ;;   "Insert a precompiler include statement, asking for what to include.
  ;; You need to give the quotation marks or the angles yourself."
  ;;   "include what? "
  ;;   > "# include " str
  ;;   )

  ;; (define-skeleton hamza/skel-cc-loop-for
  ;;   "Insert a for-loop with an int counter variable."
  ;;   >"for(int " (setq v1 (skeleton-read "Var: ")) | "i" " = 0; "
  ;;   v1 | "i" " < " @ - "; ++" v1 | "i" ") {" \n
  ;;   > @ _
  ;;   "\n}")

  ;; (define-skeleton hamza/skel-cc-cout
  ;;   "Insert a cout statement at point"
  ;;   nil
  ;;   > "std::cout << " _ " << \"\\n\"")

  ;; (defvar *skeleton-markers* nil
  ;;   "Markers for locations saved in skeleton-positions")

  ;; (add-hook 'skeleton-end-hook 'skeleton-make-markers)

  ;; (defun skeleton-make-markers ()
  ;;   (while *skeleton-markers*
  ;;     (set-marker (pop *skeleton-markers*) nil))
  ;;   (setq *skeleton-markers*
  ;; 	(mapcar 'copy-marker (reverse skeleton-positions))))

  ;; (defun skeleton-next-position (&optional reverse)
  ;;   "Jump to next position in skeleton.
  ;;          REVERSE - Jump to previous position in skeleton"
  ;;   (interactive "P")
  ;;   (let* ((positions (mapcar 'marker-position *skeleton-markers*))
  ;; 		 (positions (if reverse (reverse positions) positions))
  ;; 		 (comp (if reverse '> '<))
  ;; 		 pos)
  ;;     (when positions
  ;;       (if (catch 'break
  ;; 			(while (setq pos (pop positions))
  ;; 			  (when (funcall comp (point) pos)
  ;; 				(throw 'break t))))
  ;; 		  (goto-char pos)
  ;; 		(goto-char (marker-position
  ;; 					(car *skeleton-markers*)))))))

  ;; (global-unset-key (kbd "M-<tab>"))
  ;; (global-set-key (kbd "M-<tab>") #'skeleton-next-position)

  ;; (define-abbrev-table 'org-mode-abbrev-table
  ;;   '(("src" "" hamza/src-block)))

  ;; (define-abbrev-table 'c-mode-abbrev-table
  ;;   '(("main" "" hamza/skel-c-main)
  ;; 	("pf" ""  hamza/skel-c-printf)
  ;; 	("pff" ""  hamza/skel-c-printf-flush)
  ;; 	("pfn" ""  hamza/skel-c-printf-newline)
  ;; 	("for" ""  hamza/skel-c-loop-for)
  ;; 	("while" ""  hamza/skel-c-loop-while)
  ;; 	("fflush" ""  hamza/skel-c-fflush)
  ;; 	("fprintf" ""  hamza/skel-c-fprintf)
  ;; 	("inc" ""  hamza/skel-c-include)
  ;; 	("comment" ""  hamza/skel-c-comment)))

  ;; (define-abbrev-table 'c++-mode-abbrev-table
  ;;   '(("for" ""  hamza/skel-cc-loop-for)
  ;; 	("cout" ""  hamza/skel-cc-cout)))
#+end_src
